#!/usr/bin/env bash

# file: test.sh

# initialize 

# application specific exit code (define to silence warn message)
__core_CleanUpOnExitHookP () { 
	: 
}

LIB_DIRECTORY="../.."
LIB_DIRECTORY=$(readlink -f -- "${LIB_DIRECTORY}")
[ ! -e "${LIB_DIRECTORY}" ] && echo -e "FATAL ERROR ($(basename $0)): LIB_DIRECTORY \"${LIB_DIRECTORY}\" not found" >&2 && exit 1

# load options module (use default namespace "Options.")
source "${LIB_DIRECTORY}/options.sh"

# handle command options
USAGE="[-i INFILE -o OUTFILE -k PUBKEYFILE -c CHKFILE -p PASSWORD -I INITFILE -d LOGGING_DEBUG_LEVEL -L LOGGING_LOGFILE  -D CORE_DEBUG]"
Options.ParseOptions "${USAGE}" ${@}

# load logging module 
[ -z "${LOGGING_ISLOADED}" ] && source "${LIB_DIRECTORY}/logging.sh"

__logging_DebugConfig

# log library errors to app log file
CORE_LOGFILE="${LOGGING_LOGFILE}"

# load sacrypt module (use global namespace)
SACRYPT_LIB_DIRECTORY="${LIB_DIRECTORY}/sacrypt"
[ ! -e "${SACRYPT_LIB_DIRECTORY}" ] && echo "$0: ERROR: sacrypt lib directory \"${SACRYPT_LIB_DIRECTORY}\" does not exist" && exit 1
source "${SACRYPT_LIB_DIRECTORY}/sacrypt.sh"; ec=$?
[ ! $ec -eq 0 ] &&  echo "$0: ERROR: failed to initialize sacrypt lib" && exit $ec

# main
sacrypt_SourceSAEFile ${INITFILE}

[ "${INFILE}" == "" ] && INFILE="/dev/stdin"
if [[ "${INFILE}" == *.${SACRYPT_ENC_EXT} ]]; then
	OUTNAME=${INFILE%".${SACRYPT_ENC_EXT}"}
	[ ! -f "${OUTNAME}" ] && [ "${OUTFILE}" == "" ] && OUTFILE="${OUTNAME}"
	[ "${CHKFILE}" == "" ] && CHKFILE="${OUTNAME}.${SACRYPT_CHK_EXT}"
#        [ "${PUBKEYFILE}" == "" ] && PUBKEYFILE="${OUTNAME}.${SACRYPT_KEY_EXT}"
fi
[ ! "${INFILE}" == "/dev/stdin" ] && [ "${OUTFILE}" == "" ] && OUTFILE="$INFILE.${SACRYPT_DEC_EXT}"
[ "${CHKFILE}" == "" ] && CHKFILE="message.${SACRYPT_CHK_EXT}"
[ ! -f "${CHKFILE}" ] && CHKFILE=""

DebugMsg 3 "reading encrypted input data from \"$INFILE\""
DebugMsg 3 "writing raw data to \"$OUTFILE\""
DebugMsg 3 "reading checksum from \"$CHKFILE\""

DECFILE=$(mktemp -p ${SACRYPT_TEMPD})
[ ! -e "$DECFILE" ] && ErrorMsg "failed to create temp dec file" && exit 1
DebugMsg 3 "using \"$DECFILE\" as temp dec file"

# determine password
sacrypt_DeterminePassword "${PASSWORD}"; ec=$?; PASSWORD=$retval
[ ! $ec -eq 0 ] &&  ErrorMsg "$retval" && exit $ec
 
# determine encryption key specification
sacrypt_DetermineKey "${PUBKEYFILE}"; ec=$?; KEYSPEC=$retval
[ ! $ec -eq 0 ] &&  ErrorMsg "$retval" && exit $ec
DebugMsg 1 "key spec is ${KEYSPEC}"

if [ ! "${KEYSPEC}" == "" ]; then
    # find the encryption key in the agent 
    sacrypt_FindKeyInAgent ${KEYSPEC}; ec=$?  
    [ ! $ec -eq 0 ] && ErrorMsg "$retval" && exit $ec
    KEYINDEX=$retval
    KEYHASH=$retval1
    DebugMsg 1 "key ${KEYHASH} found in agent (#${KEYINDEX})"
else
    DebugMsg 1 "no key specified, agent not asked"
fi

# decrypt the file
sacrypt_DecryptFile "${INFILE}" "${DECFILE}" "${KEYSPEC}" "${PASSWORD}"; ec=$?
[ ! $ec -eq 0 ] && ErrorMsg "$retval" && exit $ec
DebugMsg 1 "decryption ok"

# verify decryption
if [ "${CHKFILE}" == "" ]; then
    DebugMsg 1 "no checksum data available, verification skipped"
else
    DebugMsg 1 "reading checksum from \"${CHKFILE}\""
    sacrypt_VerifyFileChecksum "${DECFILE}" "${CHKFILE}"; ec=$?
    [ ! $ec -eq 0 ] && ErrorMsg "$retval" && exit $ec
    DebugMsg 1 "checksum verification passed"
fi

# create output
if [ "${OUTFILE}" == "" ]; then
    cat "${DECFILE}" 
    DebugMsg 1 "output sent to STDOUT"
else
    cp "${DECFILE}" "${OUTFILE}"
    DebugMsg 1 "output written to \"${OUTFILE}\""
fi

exit 0

# EOF
